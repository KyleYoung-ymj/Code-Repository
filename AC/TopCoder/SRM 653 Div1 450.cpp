#include <cmath>
#include <ctime>
#include <cctype>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <vector>
#include <bitset>
#include <complex>
#include <iostream>
#include <algorithm>
#define fi first
#define se second
#define y1 jfskav
#define pb push_back
#define lson (k<<1)
#define rson (k<<1|1)
#define lowbit(x) ((x)&-(x))
#define siz(x) ((int)(x).size())
#define all(x) (x).begin(),(x).end()
#define debug(x) cout<<#x<<"="<<(x)<<endl
#define rep(i,s,t) for(register int i=(s),_t=(t);i<_t;++i)
#define per(i,s,t) for(register int i=(t)-1,_s=(s);i>=_s;--i)
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> veci;
const int mod=(int)1e9+7,inf=0x7fffffff,dxy[]={-1,0,1,0,-1};
const ll INF=1ll<<60;
const db pi=acos(-1),eps=1e-6;
template<class T>void rd(T &x){
	x=0;
	char c;
	while(c=getchar(),c<48);
	do x=(x<<3)+(x<<1)+(c^48);
		while(c=getchar(),c>47);
}
template<class T>void rec_pt(T x){
	if(!x)return;
	rec_pt(x/10);
	putchar(x%10^48);
}
template<class T>void pt(T x){
	if(!x)putchar('0');
	else rec_pt(x);
}
template<class T>inline void ptn(T x){
	pt(x),putchar('\n');
}
template<class T>inline void Max(T &a,T b){
	if(b>a)a=b;
}
template<class T>inline void Min(T &a,T b){
	if(b<a)a=b;
}
template<class T>T gcd(T a,T b){
	return b?gcd(b,a%b):a;
}
inline void mod_add(int &a,int b){
	if((a+=b)>=mod)a-=mod;
}
inline void mod_minus(int &a,int b){
	if((a-=b)<0)a+=mod;
}
int fast_mod_pow(int a,int b){
	int res=1;
	for(;b;b>>=1,a=(ll)a*a%mod)
		if(b&1)res=(ll)res*a%mod;
	return res;
}
inline int calc_inv(int x){
	return fast_mod_pow(x,mod-2);
}


const int N=(int)1e3+5,V=N,E=N<<2;

int sink,tot_edge,head[V],que[V],dist[V],arc[V];
bool used[V];

struct Edge{
	int to,nxt,cap;
	Edge(){}
	Edge(int to,int nxt,int cap):to(to),nxt(nxt),cap(cap){}
}edge[E<<1];

void add_edge(int u,int v,int c){
	edge[tot_edge]=Edge(v,head[u],c);
	head[u]=tot_edge++;
	edge[tot_edge]=Edge(u,head[v],0);
	head[v]=tot_edge++;
}

void bfs(){
	int L=0,R=0;
	memset(dist,-1,sink+1<<2);
	for(dist[que[R++]=0]=0;L<R;){
		int cur=que[L++];
		for(int i=head[cur];~i;i=edge[i].nxt){
			int to=edge[i].to;
			if(edge[i].cap&&dist[to]==-1){
				dist[to]=dist[cur]+1;
				que[R++]=to;
			}
		}
	}
}
int dfs(int cur,int flow){
	if(cur==sink)return flow;
	used[cur]=true;
	for(int i=head[cur];~i;i=edge[i].nxt){
		int to=edge[i].to;
		if(!used[to]&&edge[i].cap&&dist[to]==dist[cur]+1){
			int f=dfs(to,min(flow,edge[i].cap));
			if(f){
				edge[i].cap-=f;
				edge[i^1].cap+=f;
				return f;
			}
		}
	}
	return 0;
}
int Dinic(){
	int flow=0;
	for(;;){
		bfs();
		if(dist[sink]==-1)return flow;
		rep(i,0,sink+1)arc[i]=head[i];
		for(;;){
			memset(used,false,sink+1);
			int f=dfs(0,inf);
			if(!f)break;
			flow+=f;
		}
	}
}

class Singing {
public:
	int solve(int m, int lo, int hi, veci arr) {
		int n=siz(arr);
		tot_edge=0;
		sink=m+1;
		memset(head,-1,sink+1<<2);
		rep(i,1,m+1){
			if(i<=hi)add_edge(i,sink,0);
			else add_edge(i,sink,inf);
			if(i>=lo)add_edge(0,i,0);
			else add_edge(0,i,inf);
		}
		rep(i,1,n)if(arr[i]!=arr[i-1]){
			add_edge(arr[i],arr[i-1],1);
			add_edge(arr[i-1],arr[i],1);
		}
		return Dinic();
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	Singing *obj;
	int answer;
	obj = new Singing();
	clock_t startTime = clock();
	answer = obj->solve(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	vector <int> p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 2;
	p2 = 2;
	int t3[] = {1,2,3,2,1,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 3;
	p2 = 7;
	int t3[] = {4,4,5,5,6,5,3,6};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 6;
	p1 = 2;
	p2 = 5;
	int t3[] = {5,3,1,6,4,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 4;
	p2 = 5;
	int t3[] = {1,4,3,5,2,5,7,5,9};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 3;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 100;
	p1 = 20;
	p2 = 80;
	int t3[] = {2,27,3,53,53,52,52,60,85,89,100,53,60,2,3,53,100,89,40,42,2,53,2,85};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 5;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

/*
	
	Aug.24.16

	Tags:minimum cut
	
*/
