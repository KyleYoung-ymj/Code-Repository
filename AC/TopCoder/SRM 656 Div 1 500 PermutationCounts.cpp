#include <cmath>
#include <ctime>
#include <cctype>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <vector>
#include <bitset>
#include <complex>
#include <iostream>
#include <algorithm>
#define fi first
#define se second
#define y1 jfskav
#define pb push_back
#define lson (k<<1)
#define rson (k<<1|1)
#define lowbit(x) ((x)&-(x))
#define siz(x) ((int)(x).size())
#define all(x) (x).begin(),(x).end()
#define debug(x) cout<<#x<<"="<<(x)<<endl
#define rep(i,s,t) for(register int i=(s),_t=(t);i<_t;++i)
#define per(i,s,t) for(register int i=(t)-1,_s=(s);i>=_s;--i)
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> veci;
const int mod=(int)1e9+7,inf=0x7fffffff,dxy[]={-1,0,1,0,-1};
const ll INF=1ll<<60;
const db pi=acos(-1),eps=1e-6;
template<class T>void rd(T &x){
	x=0;
	char c;
	while(c=getchar(),c<48);
	do x=(x<<3)+(x<<1)+(c^48);
		while(c=getchar(),c>47);
}
template<class T>void rec_pt(T x){
	if(!x)return;
	rec_pt(x/10);
	putchar(x%10^48);
}
template<class T>void pt(T x){
	if(!x)putchar('0');
	else rec_pt(x);
}
template<class T>inline void ptn(T x){
	pt(x),putchar('\n');
}
template<class T>inline void Max(T &a,T b){
	if(b>a)a=b;
}
template<class T>inline void Min(T &a,T b){
	if(b<a)a=b;
}
template<class T>T gcd(T a,T b){
	return b?gcd(b,a%b):a;
}
inline void mod_add(int &a,int b){
	if((a+=b)>=mod)a-=mod;
}
inline void mod_minus(int &a,int b){
	if((a-=b)<0)a+=mod;
}
int fast_mod_pow(int a,int b){
	int res=1;
	for(;b;b>>=1,a=(ll)a*a%mod)
		if(b&1)res=(ll)res*a%mod;
	return res;
}
inline int calc_inv(int x){
	return fast_mod_pow(x,mod-2);
}


const int N=(int)1e6+5,M=2505;

int fact[N],inv_fact[N],dp[M];

void init(int n){
	fact[0]=1;
	rep(i,1,n+1)fact[i]=(ll)fact[i-1]*i%mod;
	inv_fact[n]=calc_inv(fact[n]);
	per(i,0,n)inv_fact[i]=(ll)(i+1)*inv_fact[i+1]%mod;
}
inline int binom(int n,int m){
	return (ll)fact[n]*inv_fact[m]%mod*inv_fact[n-m]%mod;
}

class PermutationCounts {
public:
	int countPermutations(int n, veci pos) {
		int m=siz(pos);
		pos.resize(m+2);
		per(i,1,m+1)pos[i]=pos[i-1];
		pos[0]=0;
		pos[m+1]=n;
		sort(all(pos));
		init(n);
		dp[0]=1;
		rep(i,1,m+2){
			dp[i]=0;
			rep(j,0,i){
				int ways=(ll)binom(pos[i],pos[j])*dp[j]%mod;
				if(i+j&1)mod_add(dp[i],ways);
				else mod_minus(dp[i],ways);
			}
		}
		return dp[m+1];
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	PermutationCounts *obj;
	int answer;
	obj = new PermutationCounts();
	clock_t startTime = clock();
	answer = obj->countPermutations(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 5;
	int t1[] = {3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 13;
	int t1[] = {12,11,10,9,8,7,6,5,4,3,2,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 13;
	p1.clear() /*{}*/;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 9;
	int t1[] = {2,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1421;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 80;
	int t1[] = {31,41,59,26,53,58,9,79,32,3,8,46};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 82650786;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 875;
	int t1[] = {295,311,98,345,420,547,646,734,380,325,608,783,141,65,305,437,769,252,44,872,123,6,50,507,450,426,343,740,69,695,101,607,597,535,342,307,329,837,803,237,459,444,498,15,712,134,473,14,715,223,787,192,710,750,193,293,242,652,212,580,545,488,506,533,774,460,285,534,350,210,559,805,686,67,159,541,706,514,657,801,373,754,310,800,589,736,863,675,254,283,604,27,628,103,81,235,677,461,609,30,581,75,756,688,262,563,679,21,217,515,836,868,13,728,717,309,267,767,259,414,332,744,129,859,4,179,632,415,278,812,79,77,784,573,433,865,407,121,477,567,790,127,593,57,674,114,239,599,552,738};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 169176190;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

/*
	
	Aug.27.16

	Tags:inclusion-exlusion principle,dp

*/
